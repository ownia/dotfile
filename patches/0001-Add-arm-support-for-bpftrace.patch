From e53777551e23dd9cacda44dd66e757608a5c09e9 Mon Sep 17 00:00:00 2001
From: ownia <o451686892@gmail.com>
Date: Wed, 24 Aug 2022 22:34:27 +0800
Subject: [PATCH] Add arm support for bpftrace

[Git url]: https://github.com/iovisor/bpftrace.git
[Branch]: master
[HEAD commit id]: 14bd1ef58ad05fadf4de72a3ab15d2d25841e5cb
[Platform]: linux

Signed-off-by: ownia <o451686892@gmail.com>
---
 src/arch/CMakeLists.txt |   5 +-
 src/arch/arm.cpp        | 128 ++++++++++++++++++++++++++++++++++++++++
 2 files changed, 132 insertions(+), 1 deletion(-)
 create mode 100644 src/arch/arm.cpp

diff --git a/src/arch/CMakeLists.txt b/src/arch/CMakeLists.txt
index 127c3528..4becc8de 100644
--- a/src/arch/CMakeLists.txt
+++ b/src/arch/CMakeLists.txt
@@ -1,4 +1,7 @@
-if(CMAKE_SYSTEM_PROCESSOR STREQUAL "aarch64")
+if(CMAKE_SYSTEM_PROCESSOR STREQUAL "arm" OR
+       CMAKE_SYSTEM_PROCESSOR STREQUAL "armv7-a")
+    add_library(arch arm.cpp)
+elseif(CMAKE_SYSTEM_PROCESSOR STREQUAL "aarch64")
     add_library(arch aarch64.cpp)
 elseif(CMAKE_SYSTEM_PROCESSOR STREQUAL "ppc64" OR
        CMAKE_SYSTEM_PROCESSOR STREQUAL "ppc64le")
diff --git a/src/arch/arm.cpp b/src/arch/arm.cpp
new file mode 100644
index 00000000..d390803c
--- /dev/null
+++ b/src/arch/arm.cpp
@@ -0,0 +1,128 @@
+#include "arch.h"
+
+#include <algorithm>
+#include <array>
+
+// SP points to the first argument that is passed on the stack
+#define ARG0_STACK 0
+
+namespace bpftrace {
+namespace arch {
+
+// clang-format off
+static std::array<std::string, 18> registers = {
+  "r0",
+  "r1",
+  "r2",
+  "r3",
+  "r4",
+  "r5",
+  "r6",
+  "r7",
+  "r8",
+  "r9",
+  "r10",
+  "fp",
+  "ip",
+  "sp",
+  "lr",
+  "pc",
+  "cpsr",
+  "orig_r0",
+};
+
+// Alternative register names that match struct pt_regs
+static std::array<std::string, 18> ptrace_registers = {
+  "regs[0]",
+  "regs[1]",
+  "regs[2]",
+  "regs[3]",
+  "regs[4]",
+  "regs[5]",
+  "regs[6]",
+  "regs[7]",
+  "regs[8]",
+  "regs[9]",
+  "regs[10]",
+  "fp",
+  "ip",
+  "sp",
+  "lr",
+  "pc",
+  "cpsr",
+  "orig_r0",
+};
+
+static std::array<std::string, 8> arg_registers = {
+  "r0",
+  "r1",
+  "r2",
+  "r3",
+  "r4",
+  "r5",
+  "r6",
+};
+// clang-format on
+
+int offset(std::string reg_name)
+{
+  auto it = find(registers.begin(), registers.end(), reg_name);
+  if (it == registers.end())
+  {
+    // Also allow register names that match the fields in struct pt_regs.
+    // These appear in USDT probe arguments.
+    it = find(ptrace_registers.begin(), ptrace_registers.end(), reg_name);
+    if (it == ptrace_registers.end())
+      return -1;
+    return distance(ptrace_registers.begin(), it);
+  }
+  return distance(registers.begin(), it);
+}
+
+int max_arg()
+{
+  return arg_registers.size() - 1;
+}
+
+int arg_offset(int arg_num)
+{
+  return offset(arg_registers.at(arg_num));
+}
+
+int ret_offset()
+{
+  return offset("r0");
+}
+
+int pc_offset()
+{
+  return offset("pc");
+}
+
+int sp_offset()
+{
+  return offset("sp");
+}
+
+int arg_stack_offset()
+{
+  return ARG0_STACK / 8;
+}
+
+std::string name()
+{
+  return std::string("arm");
+}
+
+std::vector<std::string> invalid_watchpoint_modes()
+{
+  // See arch/arm/kernel/hw_breakpoint.c:arch_build_bp_info in kernel source
+  return std::vector<std::string>{
+    "rx",
+    "wx",
+    "rwx",
+  };
+}
+
+} // namespace arch
+} // namespace bpftrace
-- 
2.37.2

